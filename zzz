#include "get_next_line.h"
//returing ret on the line 34
int	get_check(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (str[i] == '\n')
			return (0);
		i++;
	}
	return (1);
}

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

char	*ft_get_join(char *ret, char *rd)
{
	char	*rett;
	int		retlen;
	int		rdlen;
	int		i;
	int		j;

	i = 0;
	j = 0;
	retlen = ft_strlen(ret);
	rdlen = ft_strlen(rd);
	rett = malloc(retlen + rdlen + 1);
	if (!ret)
		return (NULL);
	rett[retlen + rdlen] = '\0';
	while (retlen > i)y6#include "get_next_line.h"
//returing ret on the line 34
int	get_check(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (str[i] == '\n')
			return (0);
		i++;
	}
	return (1);
}

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

char	*ft_get_join(char *ret, char *rd)
{
	char	*rett;
	int		retlen;
	int		rdlen;
	int		i;
	int		j;

	i = 0;
	j = 0;
	retlen = ft_strlen(ret);
	rdlen = ft_strlen(rd);
	rett = malloc(retlen + rdlen + 1);
	if (!ret)
		return (NULL);
	rett[retlen + rdlen] = '\0';
	while (retlen > i)
	{
		rett[i] = ret[i];
		i++;
	}
	while (rdlen > j)
	{
		rett[i + j] = rd[j];
		j++;
	}
	free (ret);
	ret = NULL;
	return (rett);
}

char	*get_next_line(int fd)
{
	char		*ret;
	char		*rd;
	int			tag;

	ret = malloc(BUF + 1);
	rd = malloc (BUF + 1);
	if (!rd || !ret || (read (fd, ret, BUF)) <= 0)
		return (NULL);
	ret[BUF] = '\0';
	rd[BUF] = '\0';
	tag = 1;
	while (tag != 0)
	{
		if ((read (fd, rd, BUF)) <= 0)
		{
			free(rd);
			rd = NULL;
			return (ret);
		}
		ret = ft_get_join(ret, rd);
		tag = get_check(ret);
	}
	free (rd);
	rd = NULL;
	return (ret);
}
	{
		rett[i] = ret[i];
		i++;
	}
	while (rdlen > j)
	{
		rett[i + j] = rd[j];
		j++;
	}
	free (ret);
	ret = NULL;
	return (rett);
}

char	*get_next_line(int fd)
{
	char		*ret;
	char		*rd;
	int			tag;

	ret = malloc(BUF + 1);
	rd = malloc (BUF + 1);
	if (!rd || !ret || (read (fd, ret, BUF)) <= 0)
		return (NULL);
	ret[BUF] = '\0';
	rd[BUF] = '\0';
	tag = 1;
	while (tag != 0)
	{
		if ((read (fd, rd, BUF)) <= 0)
		{
			free(rd);
			rd = NULL;
			return (ret);
		}
		ret = ft_get_join(ret, rd);
		tag = get_check(ret);
	}
	free (rd);
	rd = NULL;
	return (ret);
}
